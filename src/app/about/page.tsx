import ReactMarkdown from 'react-markdown';
import Box from '@mui/material/Box';

export default function Page() {
    return (
        <div>
            <Box sx={{ fontSize: "1rem", lineHeight: 1.6, '& h3': {marginTop: "1rem"} }}>
                <ReactMarkdown>
                    {aboutText}
                </ReactMarkdown>
            </Box>
        </div>
    );
}

const aboutText = `
# このアプリについて

### 概要

本アプリケーションは、論理パズル、謎解き、入試問題などを効率的に管理・学習するためのプラットフォームです。Next.jsをフロントエンド及びバックエンドAPIとして使用し、データベースにはPrismaを採用しています。ユーザー体験を向上させるための多様な機能を実装しています。

### 主な機能

1. **ユーザー認証**
   - Firebase Authentication を利用し、メールアドレスおよびGoogleアカウントでのユーザー登録・ログインを実現

2. **パズル管理**
   - 画像アップロード機能付きのリッチテキストエディタを使用し、問題文や本文を作成・編集可能
   - カテゴリー分類機能により、パズルを効率的に整理・検索可能

3. **学習支援機能**
   - パズルごとに「定石」（解法のコツ）を登録可能
   - 定石別の整理機能により、効果的な学習戦略の立案をサポート

4. **ユーザーエンゲージメント**
   - お気に入り登録機能により、ユーザーが重要なパズルを簡単に保存・アクセス可能

5. **学習進捗管理**
   - パズルの正誤判定機能により、ユーザーの理解度を即時に確認可能

### 技術スタック

- **フロントエンド/バックエンド**: Next.js, TypeScript
- **データベース**: Prisma (PostgreSQL)
- **認証**: Firebase Authentication
- **デプロイ**: Render.com
- **その他**: Material-UI, Quill Editor, Jest, GitHub Actions(CI/CD)

### 開発の目的と成果

本アプリケーションは、パズル愛好家や受験生などのユーザーが、効率的に問題を管理し、学習効果を最大化することを目的として開発しました。

開発に際しては、パズル愛好家である友人と話し合って仕様を決めました。これにより、実際のユーザーのニーズと視点を直接取り入れ、より実用的で使いやすいアプリケーションの設計が可能になりました（定石の登録機能、カテゴリー分類機能など）。

また、Next.jsとPrismaを組み合わせた最新のウェブ開発技術を駆使することで、高いパフォーマンスと拡張性を実現しました。Firebaseを活用した堅牢な認証システムにより、セキュアなユーザー管理を可能にしています。

本プロジェクトを通じて、Next.js開発の経験を積むとともに、ユーザー中心の設計思想に基づいたアプリケーション開発のスキルを磨くことができました。

### アピールポイント

1. **Quillエディタの導入と画像アップロード機能**
   - パズルの問題文や本文をリッチテキストで記述するため、Quillエディタを導入しました。DBにはHTML形式で保存し、表示時にはDelta形式に変換して表示しています。
   - 画像アップロード機能の実装には多くの時間を要しました。ツールバーからのアップロード、コピー・アンド・ペースト、ドラッグ・アンド・ドロップに対応させ、利便性を向上させました。
2. **検索機能の実装**
   - パズルのタイトルや問題文から、パズルを部分一致で検索できる機能を実装しました。デスクトップ版ではモーダル、モバイル版ではサイドバーからアクセスでき、検索結果が即時反映されます。Reactの利点であるリアクティブなUIを活かし、ストレスなくパズルを検索できるのが強みです。
3. **カテゴリー分類機能の実装**
   - パズルを効率的に管理するため、カテゴリー分類機能を実装しました。カテゴリーの追加・削除、パズルへのカテゴリーの紐付けなど、多くの機能を実装することで、ユーザーが自由にパズルを整理できるようにしました。
   - パズル作成・編集画面でのカテゴリー新規追加機能は友人からの提案で実装しました。
4. **お問い合わせフォームからのメール送信**
   - お問い合わせフォームからのメール送信機能を実装し、ユーザーからのフィードバックを受け取れるようにしました。APIでnodemailerを使用し、運営者のメールアドレスに実際にメールが送信されます。
5. コンポーネント再利用
   - チェックボックス、ボタン、モーダルなどはコンポーネント化して再利用し、コードの可読性と保守性を高めました。
   - これらはMaterial-UIのコンポーネントをカスタマイズして作成し、デザインに統一感を持たせました。
   - コンポーネント単位のテストを実施し、品質を担保しました。
`
